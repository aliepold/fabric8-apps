<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/fPOM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>de.aliepold.fabric8.jpa.mongodb</groupId>
	<artifactId>hibernate-mongodb-app</artifactId>
	<version>1.0.0-SNAPSHOT</version>

	<name>Fabric8 :: Quickstarts :: Spring-Boot :: WebMVC</name>
	<description>Shows how to use Spring Boot with WebMVC in the Java
		Container
	</description> 

	<repositories/>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		
		<fabric8.mode>openshift</fabric8.mode>
		
		<!-- Fabric8 - Versionen -->
		<version.fabric8>3.0.12</version.fabric8>
		<version.fabric8.arquillian>1.1.11.Final</version.fabric8.arquillian>
		<version.spring-boot>2.1.3.RELEASE</version.spring-boot>

		<!-- maven plugin versions -->
		<version.fabric8-maven-plugin>3.5.42</version.fabric8-maven-plugin>
		<version.maven-compiler-plugin>3.7.0</version.maven-compiler-plugin>
		<version.maven-surefire-plugin>2.18.1</version.maven-surefire-plugin>
	</properties>

	<dependencyManagement>
		<dependencies>
			<!-- import fabric8 platform bom first -->
			<dependency>
				<groupId>io.fabric8</groupId>
				<artifactId>fabric8-project-bom-with-platform-deps</artifactId>
				<version>${version.fabric8}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${version.spring-boot}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
		    <groupId>javax.validation</groupId>
		    <artifactId>validation-api</artifactId>
		    <version>2.0.1.Final</version>
		</dependency>
				

		<!-- testing -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.fabric8</groupId>
			<artifactId>fabric8-arquillian</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- spring boot -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>

		<!-- database (e.g. h2) -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>

		<dependency>
			<groupId>io.fabric8</groupId>
			<artifactId>kubernetes-assertions</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<reporting>
		<plugins>
			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.10.3</version>
				<configuration>
					<detectLinks>true</detectLinks>
					<detectJavaApiLink>true</detectJavaApiLink>
					<linksource>true</linksource>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

	<profiles>
		<profile>
			<id>openshift</id>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>fabric8-maven-plugin</artifactId>
						<version>${version.fabric8-maven-plugin}</version>
						<executions>
							<execution>
								<goals>
									<goal>resource</goal>
									<goal>build</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- Workaround for removing of ImageStream-Triggers -->
					<!-- Issue is reported: https://github.com/fabric8io/fabric8-maven-plugin/issues/816 -->
					<plugin>
						<groupId>org.codehaus.gmaven</groupId>
						<artifactId>groovy-maven-plugin</artifactId>
						<version>2.1</version>
						<dependencies>
							<dependency>
								<groupId>org.codehaus.groovy</groupId>
								<artifactId>groovy-all</artifactId>
								<version>2.5.6</version>
								<type>pom</type>
							</dependency>
							<dependency>
								<groupId>org.yaml</groupId>
								<artifactId>snakeyaml</artifactId>
								<version>1.24</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<phase>process-resources</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<source>
										<![CDATA[
										import java.io.File
										import java.io.FileInputStream
										import java.io.FileWriter
										import java.util.List
										import java.util.Map
										import org.yaml.snakeyaml.DumperOptions
										import org.yaml.snakeyaml.Yaml
										
										// List of container-names who will have no trigger
										def excludeTriggerForContainer = ["nginx-proxy", "mongodb"]
								
										def deploymentFile = new File("target/classes/META-INF/fabric8/openshift.yml")
								
										if (deploymentFile.exists()) {
								
											def options = new DumperOptions();
											options.setIndent(2);
											options.setPrettyFlow(true);
											options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
								
											def yaml = new Yaml(options);
								
											def inputStream = new FileInputStream(deploymentFile);
								
											def obj = (Map<String, Object>) yaml.load(inputStream);
											def items = (List<Map<String, Object>>) obj.get("items");
								
											for (Map<String, Object> item : items) {
												for (Map.Entry<String, Object> entryKind : item.entrySet()) {
													if (entryKind.getValue().equals("DeploymentConfig")) {
														Map<String, Object> spec = (Map<String, Object>) item.get("spec");
														def triggers = (List<Map<String, Object>>) spec.get("triggers");
														def triggersToRemove = new ArrayList<Map<String, Object>>();
														for (Map<String, Object> trigger : triggers) {
															if (trigger.containsKey("imageChangeParams")) {
																def icp = (Map<String, Object>) trigger.get("imageChangeParams");
																for (String containerName : (List<String>) icp.get("containerNames")) {
																	if (excludeTriggerForContainer.contains(containerName)) {
																		triggersToRemove.add(trigger);
																	}
																}
															}
														}
														// remove the matched triggers after foreach
														for (Object t : triggersToRemove) {
															triggers.remove(t);
														}
														yaml.dump(obj, new FileWriter(deploymentFile));
													}
												}
											}
											System.out.println(obj);
										}
										]]>
									</source>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${version.maven-surefire-plugin}</version>
						<inherited>true</inherited>
						<configuration>
							<argLine>-Djava.security.egd=file:/dev/./urandom</argLine>
							<forkMode>none</forkMode>
							<excludes>
								<exclude>**/*KT.java</exclude>
							</excludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	
	<build>
		<plugins>
			<!-- Compiler plugin enforces Java 1.8 compatibility and activates annotation 
				processors -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${version.maven-compiler-plugin}</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${version.spring-boot}</version>
				<configuration>
					<mainClass>de.aliepold.fabric8.jpa.mongodb.JpaMongoDbApplication</mainClass>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<extensions>
			<extension>
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-webdav-jackrabbit</artifactId>
				<version>2.10</version>
			</extension>
		</extensions>
	</build>
</project>
